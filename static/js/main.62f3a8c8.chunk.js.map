{"version":3,"sources":["components/cards.jsx","components/card-list.jsx","components/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Cards","props","console","log","className","alt","src","data","id","username","name","email","CardList","monstersData","map","key","SearchBox","placeholder","handleChange","type","onChange","App","handleChanges","event","setState","searchField","target","value","state","monsters","axios","get","then","response","text","catch","error","this","filteredMonsters","filter","monster","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VAuBeA,G,MAlBD,SAACC,GAEX,OADAC,QAAQC,IAAI,eAAgBF,GAExB,yBAAKG,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAAMM,KAAKC,GAArC,eACtB,4BACKP,EAAMM,KAAKE,UAEhB,4BACKR,EAAMM,KAAKG,MAEhB,4BACKT,EAAMM,KAAKI,UCUbC,G,MAlBE,SAACX,GAEd,OADAC,QAAQC,IAAIF,EAAMY,cAEd,yBAAKT,UAAU,aAEPH,EAAMY,aAAaC,KAAI,SAAAP,GACnB,OACI,kBAAC,EAAD,CACIQ,IAAKR,EAAKC,GACVD,KAAMA,UCHnBS,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACI,2BACEd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwELG,E,YApDb,aAAe,IAAD,8BACZ,+CAmBFC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CACZC,YAAaF,EAAMG,OAAOC,QAE5BzB,QAAQC,IAAIoB,EAAMG,OAAOC,QArBzB,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IALH,E,iFASM,IAAD,OACjBK,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACJ/B,QAAQC,IAAI8B,EAAS1B,KAAK2B,MAC1B,EAAKV,SAAS,CAAEK,SAAUI,EAAS1B,UAEpC4B,OAAM,SAAAC,GACLlC,QAAQC,IAAR,kBAAuBiC,S,+BAWjB,IAAD,EAC2BC,KAAKT,MAA/BC,EADD,EACCA,SAAUJ,EADX,EACWA,YAKZa,EAAmBT,EAASU,QAAO,SAAAC,GAAO,OAC9CA,EAAQ9B,KAAK+B,cAAcC,SAASjB,EAAYgB,kBAGlD,OACE,yBAAKrC,UAAU,OACb,gDACA,kBAAC,EAAD,CACEa,YAAY,kBACZC,aAAcmB,KAAKf,gBAErB,kBAAC,EAAD,CACET,aAAeyB,S,GA9CPK,aCjBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.62f3a8c8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//* styles\r\nimport './cards.style.css';\r\n\r\nconst Cards = (props) => {\r\n    console.log(\"Cards props:\", props);\r\n    return (\r\n        <div className='card-container'>\r\n            <img alt='monster' src={`https://robohash.org/${props.data.id}?set=set2`}/>\r\n            <h2>\r\n                {props.data.username}\r\n            </h2>\r\n            <h3>\r\n                {props.data.name}\r\n            </h3>\r\n            <h4>\r\n                {props.data.email}\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\n\r\n//* components\r\nimport Cards from './cards';\r\n\r\n//* styles\r\nimport './card-list.style.css';\r\n\r\n\r\nconst CardList = (props) => {\r\n    console.log(props.monstersData);\r\n    return (\r\n        <div className='card-list'>\r\n            {\r\n                props.monstersData.map(data => {\r\n                    return (\r\n                        <Cards \r\n                            key={data.id}\r\n                            data={data}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n    return(\r\n        <input \r\n          className=\"search\"\r\n          type=\"search\" \r\n          placeholder={placeholder} \r\n          onChange={handleChange}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { useState, useEffect, Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport CardList from '../src/components/card-list';\r\nimport SearchBox from '../src/components/search-box';\r\n\r\n// function App() {\r\n//   //const [monstersData, setMonstersData] = useState([]);\r\n  \r\n//   useEffect(() => {\r\n//     axios.get('https://jsonplaceholder.typicode.com/users')\r\n//     .then(response => {\r\n//       setMonstersData(response.data);\r\n//       console.log(\"monster's email:\", monstersData);\r\n//     })\r\n//     .catch(error => {\r\n//       console.log('ehh error', error)\r\n//     })\r\n//   }, [])\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <CardList monsters={monstersData}/>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }; \r\n  }\r\n\r\n  componentDidMount(){\r\n    axios.get('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => {\r\n      console.log(response.data.text);\r\n      this.setState({ monsters: response.data });\r\n    })\r\n    .catch(error => {\r\n      console.log(`no data ${error}`);\r\n    })\r\n  }\r\n\r\n  handleChanges = event => {\r\n    this.setState({\r\n      searchField: event.target.value\r\n    });\r\n    console.log(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n      //* equvillent to :\r\n        //* const monsters = this.state.monsters;\r\n        //* const searchField = this .state.searchField;\r\n  \r\n    const filteredMonsters = monsters.filter(monster => \r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n      );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox\r\n          placeholder=\"Search Monsters\"\r\n          handleChange={this.handleChanges}\r\n        />\r\n        <CardList \r\n          monstersData={ filteredMonsters }\r\n        /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}